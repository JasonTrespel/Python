Part 1: Create a new script called "db_challenge.py". Use the code from previous examples to build functions that will do the following: 
           1. Create a table called "company"
           2. Insert data into the table (as written in database03.py is fine for now)
           3. Select information from the table
           4. Update information for a specific line in the table
           5. Delete an entry for a given line in the table
        Prove that each of the functions work by having them run when you start your code.

Part 2: Update the functions created above to accept parameters. These may include things such as:
           - What table should be created (it's name - and possibly columns for it)? -- name
           - What data should be written to said table?  -- name, age, salary, table_name, etc...
           - What information would you like returned from what table? -- name, age, salary, table_name, etc...
           - What information should be updated, and for "where" in what table? 
           - Which line should be deleted?
         Prove that each of the functions work by having them run 2 times with different values at the start of your code.

Part 3: Now that you have this all working, create a flask server that will let you perform each of these actions when called on.

PART 1 SOLUTION

#!/usr/bin/env python3

import sqlite3

def create_table():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute('''CREATE TABLE IF NOT EXISTS COMPANY
     (ID INT PRIMARY KEY     NOT NULL,
     NAME           TEXT    NOT NULL,
     AGE            INT     NOT NULL,
     ADDRESS        CHAR(50),
     SALARY         REAL);''')
    print("Table created successfully")
    conn.close()


def insert_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Paul', 32, 'California', 20000.00 )")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (2, 'Allen', 25, 'Texas', 15000.00 )")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (3, 'Teddy', 23, 'Norway', 20000.00 )")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 )")
    conn.commit()
    print("Records created successfully")
    conn.close()


def select_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")

    print("Operation done successfully")
    conn.close()


def update_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute("UPDATE COMPANY set SALARY = 25000.00 where ID = 1")
    conn.commit()
    print("Total number of rows updated :", conn.total_changes)
    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")
    print("Operation done successfully")
    conn.close()


def delete_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute("DELETE from COMPANY where ID = 2;")
    conn.commit()
    print("Total number of rows deleted :", conn.total_changes)
    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")
    print("Operation done successfully")
    conn.close()


if __name__ == "__main__":
    create_table()
    insert_data()
    select_data()
    update_data()
    delete_data()
    select_data()
