Part 1: Create a new script called "db_challenge.py". Use the code from previous examples to build functions that will do the following: 
           1. Create a table called "company"
           2. Insert data into the table (as written in database03.py is fine for now)
           3. Select information from the table
           4. Update information for a specific line in the table
           5. Delete an entry for a given line in the table
        Prove that each of the functions work by having them run when you start your code.

Part 2: Update the functions created above to accept parameters. These may include things such as:
           - What table should be created (it's name - and possibly columns for it)? -- name
           - What data should be written to said table?  -- name, age, salary, table_name, etc...
           - What information would you like returned from what table? -- name, age, salary, table_name, etc...
           - What information should be updated, and for "where" in what table? 
           - Which line should be deleted?
         Prove that each of the functions work by having them run 2 times with different values at the start of your code.

Part 3: Now that you have this all working, create a flask server that will let you perform each of these actions when called on.

PART 1 SOLUTION

#!/usr/bin/env python3

import sqlite3

def create_table():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute('''CREATE TABLE IF NOT EXISTS COMPANY
     (ID INT PRIMARY KEY     NOT NULL,
     NAME           TEXT    NOT NULL,
     AGE            INT     NOT NULL,
     ADDRESS        CHAR(50),
     SALARY         REAL);''')
    print("Table created successfully")
    conn.close()


def insert_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Paul', 32, 'California', 20000.00 )")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (2, 'Allen', 25, 'Texas', 15000.00 )")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (3, 'Teddy', 23, 'Norway', 20000.00 )")
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 )")
    conn.commit()
    print("Records created successfully")
    conn.close()


def select_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")

    print("Operation done successfully")
    conn.close()


def update_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute("UPDATE COMPANY set SALARY = 25000.00 where ID = 1")
    conn.commit()
    print("Total number of rows updated :", conn.total_changes)
    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")
    print("Operation done successfully")
    conn.close()


def delete_data():
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute("DELETE from COMPANY where ID = 2;")
    conn.commit()
    print("Total number of rows deleted :", conn.total_changes)
    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")
    print("Operation done successfully")
    conn.close()


if __name__ == "__main__":
    create_table()
    insert_data()
    select_data()
    update_data()
    delete_data()
    select_data()


PART 2 SOLUTION

#!/usr/bin/env python3

import sqlite3


def create_table(table_name="COMPANY"):
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f'''CREATE TABLE IF NOT EXISTS {table_name}
     (ID INT     NOT NULL,
     NAME           TEXT    NOT NULL,
     AGE            INT     NOT NULL,
     ADDRESS        CHAR(50),
     SALARY         REAL);''')
    print(f"Table '{table_name}' created successfully")
    conn.close()


def insert_data(id, name, age, address, salary, table_name="COMPANY"):
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f"INSERT INTO {table_name} (ID,NAME,AGE,ADDRESS,SALARY) VALUES ({id}, '{name}', {age}, '{address}', {salary})")
    conn.commit()
    print("Records created successfully")
    conn.close()


def select_data(selector, table_name="COMPANY"):
    """
    :param selector: sting - comma separated like 'id, name, salary'
    :param table_name: string - name of table
    """
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    cursor = conn.execute(f"SELECT {selector} from {table_name}")
    rows = []
    for row in cursor:
        print(row)
        rows.append(row)
    print("Operation done successfully")
    conn.close()
    return rows


def update_data(set_param, set_value, where_param, where_value, table_name="COMPANY"):
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f"UPDATE {table_name} set {set_param} = '{set_value}' where {where_param} = '{where_value}'")
    conn.commit()
    print("Total number of rows updated :", conn.total_changes)
    db_info = select_data("id, name, address, salary")
    for row in db_info:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")
    print("Operation done successfully")
    conn.close()


def delete_data(where_param, where_value, table_name="COMPANY"):
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f"DELETE from {table_name} where {where_param} = '{where_value}';")
    conn.commit()
    print("Total number of rows deleted :", conn.total_changes)
    db_info = select_data("id, name, address, salary")
    for row in db_info:
        print("ID = ", row[0])
        print("NAME = ", row[1])
        print("ADDRESS = ", row[2])
        print("SALARY = ", row[3], "\n")
    print("Operation done successfully")
    conn.close()


if __name__ == "__main__":
    create_table() # Creates table COMPANY
    create_table("TEST")
    insert_data(1, "CHAD", 34, "carlisle", 900000)
    insert_data(1, "CHAD", 34, "carlisle", 900000, "TEST")
    select_data("id, name")
    select_data("id, name", "TEST")
    update_data("SALARY", 800000, "name", "CHAD")
    update_data("SALARY", 800000, "name", "CHAD", "TEST")
    delete_data("name", "CHAD")
    delete_data("name", "CHAD", "TEST")

PART 3 SOLUTION

#!/usr/bin/env python3

import sqlite3

from flask import Flask, request, redirect, url_for, jsonify

app = Flask(__name__)


@app.route("/")
def index():
    html = """
    <h1> Welcome to your COMPANY Database! </h1>
    <h3> What would you like to do? </h3>
    <a href="/create_table">Create a Table</a>
    <a href="/insert_data">Insert Data</a>
    <a href="/select_data">Select Data</a>
    <a href="/update_data">Update Data</a>
    <a href="/delete_data">Delete Data</a>
    """
    return html


@app.route("/create_table")
def create_table(table_name="Company"):
    table_name = request.args.get("table_name") if request.args.get("table_name") else table_name
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f'''CREATE TABLE IF NOT EXISTS {table_name}
     (ID INT     NOT NULL,
     NAME           TEXT    NOT NULL,
     AGE            INT     NOT NULL,
     ADDRESS        CHAR(50),
     SALARY         REAL);''')
    print("Table created successfully")
    conn.close()
    return f"Table {table_name} created!"


@app.route("/insert_data")
def insert_data(id=8675309, name="Bob", age=32, address="here", salary=50000, table_name="COMPANY"):
    # Set var = this value IF <expression>==True ELSE that value
    id = request.args.get("id") if request.args.get("id") else id
    name = request.args.get("name") if request.args.get("name") else name
    age = request.args.get("age") if request.args.get("age") else age
    address = request.args.get("address") if request.args.get("address") else address
    salary = request.args.get("salary") if request.args.get("salary") else salary
    table_name = request.args.get("table_name") if request.args.get("table_name") else table_name
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f"INSERT INTO {table_name} (ID,NAME,AGE,ADDRESS,SALARY) VALUES ({id}, '{name}', {age}, '{address}', {salary})")
    conn.commit()
    print("Records created successfully")
    conn.close()
    return f"INSERT INTO {table_name} (ID,NAME,AGE,ADDRESS,SALARY) VALUES ({id}, '{name}', {age}, '{address}', {salary})"


@app.route("/select_data")
def select_data(selector="name", table_name="COMPANY"):
    """
    :param selector: string - comma separated like 'id, name, salary'
    :param table_name: string - name of table

    try out the path /select_data?selector=id,%20name,%20age
    """
    selector = request.args.get("selector") if request.args.get("selector") else selector
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    cursor = conn.execute(f"SELECT {selector} from COMPANY")
    rows = []
    for row in cursor:
        print(row)
        rows.append(row)
    print("Operation done successfully")
    conn.close()
    data = {"command": f"SELECT {selector} from COMPANY", "result": rows}
    return jsonify(data)


@app.route("/update_data")
def update_data(set_param="salary", set_value=0, where_param="id", where_value=1, table_name="COMPANY"):
    set_param = request.args.get("set_param") if request.args.get("set_param") else set_param
    set_value = request.args.get("set_value") if request.args.get("set_value") else set_param
    where_param = request.args.get("where_param") if request.args.get("where_param") else where_param
    where_value = request.args.get("where_value") if request.args.get("where_value") else where_value
    table_name = request.args.get("table_name") if request.args.get("table_name") else table_name
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f"UPDATE {table_name} set {set_param} = '{set_value}' where {where_param} = '{where_value}'")
    conn.commit()
    print("Total number of rows updated :", conn.total_changes)
    conn.close()
    return redirect(url_for("select_data", selector="*"))


@app.route("/delete_data")
def delete_data(where_param="id", where_value=1, table_name="COMPANY"):
    where_param = request.args.get("where_param") if request.args.get("where_param") else where_param
    where_value = request.args.get("where_value") if request.args.get("where_value") else where_value
    conn = sqlite3.connect('test.db')
    print("Opened database successfully")
    conn.execute(f"DELETE from {table_name} where {where_param} = '{where_value}';")
    conn.commit()
    print("Total number of rows deleted :", conn.total_changes)
    conn.close()
    return redirect(url_for("select_data", selector="*"))


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=2224)
